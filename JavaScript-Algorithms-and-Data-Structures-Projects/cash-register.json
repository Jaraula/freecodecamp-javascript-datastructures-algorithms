{"index.js":"// function checkCashRegister(price, cash, cid) {\n//   let change = (cash - price).toFixed(2); //0.50 centimes\n//   let bDecimal = parseInt( change.toString().split(\".\")[0] );\n//   let aDecimal = parseInt( change.toString().split(\".\")[1] ) / 100;\n//   let unitArray = [ cid[8][1], cid[7][1], cid[6][1], cid[5][1], cid[4][1] ];\n//   let unitArray2 = [ cid[3][1], cid[2][1], cid[1][1], cid[0][1] ];\n//   let unitArrayChange = [ [\"ONE HUNDRED\", 0], [\"TWENTY\", 0], [\"TEN\", 0], [\"FIVE\", 0], [\"ONE\", 0] ];\n// \tlet unitArrayChange2 = [ [\"QUARTER\", 0], [\"DIME\", 0], [\"NICKEL\", 0], [\"PENNY\", 0] ];\n// \tlet unitArrayChangeNew1 = [ [\"ONE HUNDRED\", 0], [\"TWENTY\", 0], [\"TEN\", 0], [\"FIVE\", 0], [\"ONE\", 0] ];\t\n// \tlet unitArrayChangeNew2 = [ [\"QUARTER\", 0], [\"DIME\", 0], [\"NICKEL\", 0], [\"PENNY\", 0] ];\n\t\n//   let changeFactor = 0;\n// \tlet unitIndex = 0;\n\n//   let calc1 = 0;\n//   let calc2 = 0;\n\n// \t//In the cash register, i check how many \"Integer money\" i have\n// \tfor( let k = 0; k < unitArray.length; k++ ) {\n// \t    calc1 += unitArray[k];\n\t\t\n// \t\t//In the cash register, i check how many \"Fractional money\" i have\n// \t\tfor( let k = 0; k < unitArray2.length; k++ ) {\n// \t\t    calc2 += unitArray2[k];\n// \t\t}\n// \t}\n\t\n// \t//To start with, if i don't have enough Integer money OR Fractional Money\n// \tif( ( bDecimal > calc1 )  || ( aDecimal > calc2 ) ) {\n// \t    return {status: \"INSUFFICIENT_FUNDS\", change: []};\n// \t}\n\n//   while( bDecimal > 0 ) {\n//       if( ( bDecimal >= 100 ) && ( unitArray[0] >= 100 ) ){\n//     \t    changeFactor = 100;\n//     \t    unitIndex = 0;\n//       } else if( ( bDecimal >= 20 ) && ( unitArray[1] >= 20 ) ) {\n//     \t    changeFactor = 20;\n//     \t    unitIndex = 1;\n//       } else if( ( bDecimal >= 10 )  && ( unitArray[2] >= 10 ) ){\n//     \t    changeFactor = 10;\n//     \t    unitIndex = 2;\n//       } else if( ( bDecimal >= 5 ) && ( unitArray[3] >= 5 ) ){\n//     \t    changeFactor = 5;\n//         \tunitIndex = 3;\n//       } else if( ( bDecimal >= 1 ) && ( unitArray[4] >= 1 ) ){\n//     \t    changeFactor = 1;\n//     \t    unitIndex = 4;\n//       } else {\n//     \t    // break;\n//       }\n\n//   \t\tbDecimal = bDecimal - changeFactor;\n//   \t\tunitArray[unitIndex] = unitArray[unitIndex] - changeFactor;\n//   \t\tunitArrayChange[unitIndex][1] = unitArrayChange[unitIndex][1] + 1;\n//   \t\tunitArrayChangeNew1[unitIndex][1] = unitArrayChange[unitIndex][1] * changeFactor;\n//   }\n\n// \t//reset\n// \tchangeFactor = 0;\n// \tunitIndex = 0;\n  \t\n// \twhile( aDecimal > 0 ) {\n// \t\t  if( ( aDecimal >= 0.25 ) && ( unitArray2[0] >= 0.25 ) ){\n// \t\t\t    changeFactor = 0.25;\n// \t\t\t    unitIndex = 0;\n//   \t\t} else if( ( aDecimal >= 0.10 ) && ( unitArray2[1] >= 0.10 )  ) {\n// \t\t\t    changeFactor = 0.10;\n// \t\t\t    unitIndex = 1;\n//   \t\t} else if( ( aDecimal >= 0.05 ) && ( unitArray2[2] >= 0.05 )  ){\n// \t\t\t    changeFactor = 0.05;\n// \t\t\t    unitIndex = 2;\n//   \t\t} else if( ( aDecimal >= 0.01 ) && ( unitArray2[3] >= 0.01 )  ){\n// \t\t\t    changeFactor = 0.01;\n// \t\t\t    unitIndex = 3;\n//   \t\t} else {\n// \t\t      //break;\n// \t\t  }\n\n//   \t\taDecimal = aDecimal - changeFactor;\n\n//   \t\tlet valueFixed = parseFloat( unitArray2[unitIndex] - changeFactor ).toFixed( 2 );\n//   \t\tunitArray2[unitIndex] = parseFloat( valueFixed );\n  \t\t\n//   \t\tunitArrayChange2[unitIndex][1] = unitArrayChange2[unitIndex][1] + 1;\n  \t\t\n//   \t\tlet valueFixed2 = (unitArrayChange2[ unitIndex][1] * changeFactor ).toFixed( 2 );\n//   \t\tunitArrayChangeNew2[unitIndex][1] = parseFloat( valueFixed2 );\n\t\n//   }\n\n// \tvar unitArray3 = unitArray.concat( unitArray2 );\n\n// \tunitArray3 = unitArray3.filter( function( x ){\n// \t\treturn ( x !== 0 );\n// \t} );\n\t\n// \tvar unitArrayChangeNew3 = unitArrayChangeNew1.concat( unitArrayChangeNew2 );\n\n// \tfor( let k = 0; k < unitArrayChangeNew3.length; k++ ) {\n// \t    if( unitArrayChangeNew3[k][1] == 0 ) {\n// \t\t\t    unitArrayChangeNew3[k].splice( 0, 1 );\n// \t\t\t    delete unitArrayChangeNew3[k];\n// \t\t  }\n// \t}\n// \tunitArrayChangeNew3 = unitArrayChangeNew3.filter( function( x ){\n// \t    return ( x !== ( undefined || null || '' ) );\n// \t} );\n\t\n// \t//Handle if my register machin is empty or not\n// \tif( unitArray3.length == 0 ) {\t\n// \t    return {status: \"CLOSED\", change: cid};\n// \t}else {\n// \t    return {status: \"OPEN\", change: unitArrayChangeNew3};\n// \t}\n// };\n\n// console.log( checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]));\n\n// Another solution\nfunction checkCashRegister(price, cash, cid) {\n  var cashAvailable = 0;\n  var changeOwed = cash - price;\n  var change = {\n    \"ONE HUNDRED\": 100,\n    TWENTY: 20,\n    TEN: 10,\n    FIVE: 5,\n    ONE: 1,\n    QUARTER: 0.25,\n    DIME: 0.1,\n    NICKEL: 0.05,\n    PENNY: 0.01\n  };\n\n  var yourChange = {\n    status: \"OPEN\"\n  };\n\n  var yourChange = {\n    status: \"OPEN\",\n    change: []\n  };\n\n  var noFunds = {\n    status: \"INSUFFICIENT_FUNDS\",\n    change: []\n  };\n\n  var closed = {\n    status: \"CLOSED\",\n    change: cid\n  };\n\n  var flatt = cid.reduce(function(acc, curr) {\n    return acc.concat(curr);\n  });\n\n  for (var i = 0; i < flatt.length; i++) {\n    if (typeof flatt[i] === \"number\") {\n      cashAvailable += flatt[i];\n    }\n  }\n  cashAvailable = Math.round(100 * cashAvailable) / 100;\n\n  if (cashAvailable < changeOwed) {\n    return noFunds;\n  } else if (cashAvailable === changeOwed) {\n    return closed;\n  }\n  //the below code is for coins only and changeOwed is less than one dollar.\n  var coins = 0;\n  for (var i = 3; i >= 0; i--) {\n    if (cid[i][1] > 0.0) {\n      coins += cid[i][1];\n    }\n  }\n  if (changeOwed > coins && changeOwed < 1.0) {\n    return noFunds;\n  }\n  //the below code if fo the actual change returned\n\n  var ans = [];\n  var compiler = 0;\n  for (var prop in change) {\n    var check = changeOwed - change[prop];\n    if (check < changeOwed && check > 0) {\n      for (var i = cid.length - 1; i > -1; i--) {\n        if (cid[i][0] === prop) {\n          var changeAvailable = cid[i][1];\n          console.log(changeAvailable);\n          while (\n            changeAvailable > 0 &&\n            changeOwed > 0 &&\n            changeOwed >= change[prop]\n          ) {\n            changeAvailable = changeAvailable - change[prop];\n            changeOwed = changeOwed - change[prop];\n            compiler += change[prop];\n            changeOwed = Math.round(100 * changeOwed) / 100;\n          }\n          ans.push([prop, compiler]);\n          compiler = 0;\n        }\n      }\n    }\n  }\n  yourChange.change = ans;\n\n  return yourChange;\n}\ncheckCashRegister(19.5, 20, [\n  [\"PENNY\", 1.01],\n  [\"NICKEL\", 2.05],\n  [\"DIME\", 3.1],\n  [\"QUARTER\", 4.25],\n  [\"ONE\", 90],\n  [\"FIVE\", 55],\n  [\"TEN\", 20],\n  [\"TWENTY\", 60],\n  [\"ONE HUNDRED\", 100]\n]);\n\nconsole.log( checkCashRegister(19.5, 20, [[\"PENNY\", 1.01], [\"NICKEL\", 2.05], [\"DIME\", 3.1], [\"QUARTER\", 4.25], [\"ONE\", 90], [\"FIVE\", 55], [\"TEN\", 20], [\"TWENTY\", 60], [\"ONE HUNDRED\", 100]]));"}